#!/usr/bin/env node
var program = require('commander');
var fs = require('fs');
var chalk = require('chalk');
var extend = require('extend');
var api = require('../src/cli-api');
var exit = require('exit');
var logSymbols = require('log-symbols');

program
  .version('2.0.0')
  .usage(
    '[options] <file ...>\n\n  QUnit Migrate: A tool to migrate your files to QUnit 2.0 API')
  .option('-c, --config <path>', 'Config file for qunit-migrate')
  .option('-P, --parser <regex|ast>', 'Parser to be used for parsing, Default: ast')
  .option('-w, --write', 'Pass if parsed files should be overwritten. Default: false')
  .option('-p, --preset <string>', 'Preset rule for jscs config. Default: jquery')
  .option('-j, --no-jscs', 'Pass if jscs fix should not be applied. Default: true')

program.on('--help', function(){
  console.log('  Globbing is supported in files')
  console.log('');
  console.log('  Examples:');
  console.log('');
  console.log('    $ qunit-migrate "./**/*.js" -w --preset "google" -c "config.json"');
  console.log('');
  console.log('  By Amanpreet Singh <@apsdehal>');
  console.log('');
});

program.parse(process.argv);

var config;

if (program.config) {
  try {
    config = fs.readFileSync(program.config);
  } catch (e) {
    console.log(logSymbols.error + ' ' +
      chalk.bold.red('Failed to read config file passed: %s'),
      program.config);
    console.log(e.toString());
    exit();
  }

  try {
    config = JSON.parse(config);
  } catch (e) {
    console.log(logSymbols.error + ' ' +
      chalk.bold.red('Failed to parse JSON in file: %s'),
      program.config);
    console.log(e.toString());
    exit();

  }
}

config = config || {};

extend(config, {
  files: program.args,
  write: program.write,
  jscs: program.jscs,
  parser: program.parser,
  preset: program.preset
});

api(config);
